local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

local localPlayer = Players.LocalPlayer
local PlayerGui = localPlayer:WaitForChild("PlayerGui")

-- URL to fetch the list of user IDs from GitHub
local url = "https://raw.githubusercontent.com/Asstricks/21bitcheswantingmycock/refs/heads/main/idss"

-- Function to create the notification UI
local function createNotification(text, color)
    -- Remove any existing notifications
    local existingGui = PlayerGui:FindFirstChild("HorseNotificationUI")
    if existingGui then
        existingGui:Destroy()
    end

    -- Create a new ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "HorseNotificationUI"
    screenGui.Parent = PlayerGui

    -- Create a Frame for the notification
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 300, 0, 100) -- Width 300, Height 100
    frame.Position = UDim2.new(1, 20, 0.05, 0) -- Off-screen position to the right
    frame.AnchorPoint = Vector2.new(1, 0) -- Anchor on the right
    frame.BackgroundColor3 = color
    frame.BackgroundTransparency = 0.2
    frame.BorderSizePixel = 0
    frame.Parent = screenGui

    -- Add rounded corners to the frame
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0.1, 0)
    corner.Parent = frame

    -- Create a TextLabel for the message
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0) -- Fill the entire frame
    textLabel.Position = UDim2.new(0, 0, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = text
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
    textLabel.TextScaled = true
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.Parent = frame

    -- Tween the notification in from the right
    local tweenIn = TweenService:Create(frame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Position = UDim2.new(1, -320, 0.05, 0) })
    tweenIn:Play()

    -- Tween completion: After waiting 3 seconds, tween the notification out
    tweenIn.Completed:Connect(function()
        wait(3)
        local tweenOut = TweenService:Create(frame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In), { Position = UDim2.new(1, 20, 0.05, 0) })
        tweenOut:Play()
        tweenOut.Completed:Connect(function()
            screenGui:Destroy() -- Destroy the notification GUI after it has been tweened out
        end)
    end)
end -- End of createNotification function

-- Fetch the list of IDs from GitHub
local success, response = pcall(function()
    return game:HttpGet(url)
end)

-- If the fetch was successful, continue with parsing and checking
if success then
    -- Parse the fetched response
    local idsList = {}
    for line in response:gmatch("[^\r\n]+") do
        local userId = line:match("%d+")
        if userId then
            userId = tonumber(userId)
            table.insert(idsList, userId)
        end
    end

    -- Get the local player's User ID
    local userId = localPlayer.UserId

    -- Check if the UserId matches one in the list
    local matchFound = false
    for _, id in ipairs(idsList) do
        if userId == id then
            matchFound = true
            break
        end
    end

    -- Show notification based on the match result
    if matchFound then
        createNotification("MATCHED", Color3.fromRGB(0, 255, 0)) -- Green for matched
    else
        createNotification("NOT REGISTERED", Color3.fromRGB(255, 0, 0)) -- Red for not registered
    end
else
    warn("Failed to get user ID list from GitHub: " .. tostring(response))
end -- End of HTTP request success check
