local TweenService = game:GetService("TweenService")
local uis = game:GetService("UserInputService")

function library:tween(object, properties, duration)
    if object and properties then
        local tween = TweenService:Create(
            object,
            TweenInfo.new(duration or 0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            properties
        )
        tween:Play()
    else
        warn("Tweening failed: invalid object or properties.")
    end
end

function library:create(Object, Properties, Parent)
    local Obj = Instance.new(Object)
    for i, v in pairs(Properties) do
        Obj[i] = v
    end
    if Parent then
        Obj.Parent = Parent
    end
    return Obj
end

function library:set_draggable(gui)
    local dragging, dragInput, dragStart, startPos

    local function update(input)
        local delta = input.Position - dragStart
        gui.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end

    gui.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = gui.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    gui.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    uis.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

function library.new(library_title)
    local menu = {}
    menu.is_minimized = false

    -- Signal creation
    menu.on_load_cfg = library.Signal.new()

    -- ScreenGui
    local ScreenGui = library:create("ScreenGui", {
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global,
        Name = "CustomUI"
    }, game:GetService("CoreGui"))

    -- Main Frame (UI Background)
    local MainFrame = library:create("Frame", {
        Name = "Main",
        BackgroundColor3 = Color3.fromRGB(15, 15, 15),
        BorderColor3 = Color3.fromRGB(78, 93, 234),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(0, 700, 0, 500), -- Adjust size as needed
        AnchorPoint = Vector2.new(0.5, 0.5)
    }, ScreenGui)

    -- Draggable Main Frame
    library:set_draggable(MainFrame)

    -- UI Title
    local Title = library:create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(1, -20, 0, 30),
        Font = Enum.Font.Ubuntu,
        Text = library_title,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left
    }, MainFrame)

    -- Close Button
    local CloseButton = library:create("TextButton", {
        Name = "CloseButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -30, 0, 0), -- Positioned at the top right corner
        Size = UDim2.new(0, 30, 0, 30),
        Text = "X",
        Font = Enum.Font.Ubuntu,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 18
    }, MainFrame)

    -- Functionality to close the UI
    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)

    -- Minimize Button
    local MinimizeButton = library:create("TextButton", {
        Name = "MinimizeButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -60, 0, 0), -- Positioned next to the close button
        Size = UDim2.new(0, 30, 0, 30),
        Text = "_",
        Font = Enum.Font.Ubuntu,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 18
    }, MainFrame)

    -- Toggle the UI between minimized and full state
    MinimizeButton.MouseButton1Click:Connect(function()
        if menu.is_minimized then
            library:tween(MainFrame, { Size = UDim2.new(0, 700, 0, 500) }, 0.4)
        else
            library:tween(MainFrame, { Size = UDim2.new(0, 700, 0, 30) }, 0.4)
        end
        menu.is_minimized = not menu.is_minimized
    end)

    -- Tab Buttons and Content Holder
    local TabButtons = library:create("Frame", {
        Name = "TabButtons",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 35),
        Size = UDim2.new(0, 100, 1, -35)
    }, MainFrame)

    local UIListLayout = library:create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5)
    }, TabButtons)

    local Tabs = library:create("Frame", {
        Name = "Tabs",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 120, 0, 35),
        Size = UDim2.new(1, -130, 1, -35)
    }, MainFrame)

    -- Example of using the signal
    menu.on_load_cfg:Connect(function()
        print("Configuration Loaded!")
    end)

    return menu
end

return library
