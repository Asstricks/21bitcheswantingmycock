local library = {}
print("Library table initialized.")

local Signal = {}
Signal.__index = Signal

function Signal.new()
    local self = setmetatable({}, Signal)
    self._bindableEvent = Instance.new("BindableEvent")
    self._argMap = {}
    self._source = ""
    self._bindableEvent.Event:Connect(function(key)
        self._argMap[key] = nil
        if not self._bindableEvent and not next(self._argMap) then
            self._argMap = nil
        end
    end)
    return self
end

function Signal:Fire(...)
    if not self._bindableEvent then
        warn("Signal is already destroyed.")
        return
    end
    local args = table.pack(...)
    local HttpService = game:GetService("HttpService")
    local key = HttpService:GenerateGUID(false)
    self._argMap[key] = args
    self._bindableEvent:Fire(key)
end

function Signal:Connect(handler)
    if type(handler) ~= "function" then
        error("connect expects a function")
    end
    return self._bindableEvent.Event:Connect(function(key)
        local args = self._argMap[key]
        if args then
            handler(table.unpack(args, 1, args.n))
        else
            error("Missing arg data, probably due to reentrance.")
        end
    end)
end

function Signal:Wait()
    local key = self._bindableEvent.Event:Wait()
    local args = self._argMap[key]
    if args then
        return table.unpack(args, 1, args.n)
    else
        error("Missing arg data, probably due to reentrance.")
        return nil
    end
end

function Signal:Destroy()
    if self._bindableEvent then
        self._bindableEvent:Destroy()
        self._bindableEvent = nil
    end
    setmetatable(self, nil)
end

library.Signal = Signal
print("Signal class assigned to library.")

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
print("Roblox services obtained.")

function library:tween(object, properties, duration)
    if object and properties then
        local tween = TweenService:Create(
            object,
            TweenInfo.new(duration or 0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            properties
        )
        tween:Play()
    else
        warn("Tweening failed: invalid object or properties.")
    end
end
print("Tween function defined.")

function library:create(Object, Properties, Parent)
    local Obj = Instance.new(Object)
    for i, v in pairs(Properties) do
        Obj[i] = v
    end
    if Parent then
        Obj.Parent = Parent
    end
    return Obj
end
print("Create function defined.")

function library:set_draggable(gui)
    local dragging = false
    local dragInput, dragStart, startPos

    gui.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = gui.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            gui.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end
print("Set draggable function defined.")

function library.new(library_title)
    print("Creating UI...")
    local menu = {}
    menu.is_minimized = false

    menu.on_load_cfg = library.Signal.new()
    print("Signal object created.")

    local ScreenGui = library:create("ScreenGui", {
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global,
        Name = "CustomUI"
    }, CoreGui)
    print("ScreenGui created.")

    local MainFrame = library:create("Frame", {
        Name = "Main",
        BackgroundColor3 = Color3.fromRGB(15, 15, 15),
        BorderColor3 = Color3.fromRGB(78, 93, 234),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(0, 700, 0, 500),
        AnchorPoint = Vector2.new(0.5, 0.5)
    }, ScreenGui)
    print("MainFrame created.")

    library:set_draggable(MainFrame)
    print("MainFrame set to draggable.")

    local Title = library:create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(1, -20, 0, 30),
        Font = Enum.Font.Ubuntu,
        Text = library_title,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left
    }, MainFrame)
    print("Title created.")

    local CloseButton = library:create("TextButton", {
        Name = "CloseButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -30, 0, 0),
        Size = UDim2.new(0, 30, 0, 30),
        Text = "X",
        Font = Enum.Font.Ubuntu,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 18
    }, MainFrame)
    print("CloseButton created.")

    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
        print("UI closed.")
    end)

    local MinimizeButton = library:create("TextButton", {
        Name = "MinimizeButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -60, 0, 0),
        Size = UDim2.new(0, 30, 0, 30),
        Text = "_",
        Font = Enum.Font.Ubuntu,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 18
    }, MainFrame)
    print("MinimizeButton created.")

    MinimizeButton.MouseButton1Click:Connect(function()
        if menu.is_minimized then
            library:tween(MainFrame, { Size = UDim2.new(0, 700, 0, 500) }, 0.4)
            print("UI restored.")
        else
            library:tween(MainFrame, { Size = UDim2.new(0, 700, 0, 30) }, 0.4)
            print("UI minimized.")
        end
        menu.is_minimized = not menu.is_minimized
    end)
    print("Minimize functionality connected.")

    local TabButtons = library:create("Frame", {
        Name = "TabButtons",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 35),
        Size = UDim2.new(0, 100, 1, -35)
    }, MainFrame)
    print("TabButtons created.")

    local UIListLayout = library:create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5)
    }, TabButtons)
    print("UIListLayout created.")

    local Tabs = library:create("Frame", {
        Name = "Tabs",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 120, 0, 35),
        Size = UDim2.new(1, -130, 1, -35)
    }, MainFrame)
    print("Tabs created.")

    menu.on_load_cfg:Connect(function()
        print("Configuration Loaded!")
    end)
    print("Signal connected to 'on_load_cfg'.")

    menu.on_load_cfg:Fire()
    print("Signal fired: Configuration Loaded!")

    print("UI created successfully.")

    return menu
end

-- Instantiate the UI
local ui = library.new("My Custom UI")
print("UI instantiated.")
