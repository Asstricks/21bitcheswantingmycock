local library = {}

local TweenService = game:GetService("TweenService")
function library:tween(...) TweenService:Create(...):Play() end

local uis = game:GetService("UserInputService")

-- Utility to create UI elements
function library:create(Object, Properties, Parent)
    local Obj = Instance.new(Object)
    for i, v in pairs(Properties) do
        Obj[i] = v
    end
    if Parent ~= nil then
        Obj.Parent = Parent
    end
    return Obj
end

local function set_draggable(gui)
    local dragging, dragInput, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    gui.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = gui.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    gui.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    uis.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

function library.new(library_title)
    local menu = {}
    menu.values = {}
    
    -- Screen GUI
    local ScreenGui = library:create("ScreenGui", {
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global,
        Name = "LibraryUI",
        IgnoreGuiInset = true,
    })

    ScreenGui.Parent = game:GetService("CoreGui")

    -- Main Frame (UI Window)
    local ImageLabel = library:create("Frame", {
        Name = "Main",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(15, 15, 15),
        BorderColor3 = Color3.fromRGB(78, 93, 234),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(0, 550, 0, 400), -- Smaller for better fitting
        ZIndex = 2,
    }, ScreenGui)

    set_draggable(ImageLabel)

    local Title = library:create("TextLabel", {
        Name = "Title",
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0, 0),
        Size = UDim2.new(1, -22, 0, 30),
        Font = Enum.Font.Ubuntu,
        Text = library_title,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
    }, ImageLabel)

    local TabButtons = library:create("Frame", {
        Name = "TabButtons",
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 12, 0, 41),
        Size = UDim2.new(0, 76, 0, 347), -- Adjusted height
    }, ImageLabel)

    local UIListLayout = library:create("UIListLayout", {
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5), -- Add some padding for cleaner alignment
    }, TabButtons)

    local Tabs = library:create("Frame", {
        Name = "Tabs",
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 102, 0, 42),
        Size = UDim2.new(0, 436, 0, 346), -- Adjusted width and height
    }, ImageLabel)

    local selected_tab

    function menu.new_tab(tab_image)
        local tab = {}
        local TabButton = library:create("TextButton", {
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 60, 0, 60), -- Adjusted size for better layout
            Text = "",
        }, TabButtons)

        local TabImage = library:create("ImageLabel", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundTransparency = 1,
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Size = UDim2.new(0, 32, 0, 32), -- Adjusted for better fit
            Image = tab_image,
            ImageColor3 = Color3.fromRGB(100, 100, 100),
        }, TabButton)

        local TabContent = library:create("Frame", {
            Name = "Tab",
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Visible = false,
        }, Tabs)

        -- First tab selected by default
        if not selected_tab then
            selected_tab = TabButton
            TabImage.ImageColor3 = Color3.fromRGB(84, 101, 255)
            TabContent.Visible = true
        end

        -- TabButton Logic
        TabButton.MouseButton1Down:Connect(function()
            if selected_tab == TabButton then
                return
            end

            -- Unselect all tabs
            for _, TButton in pairs(TabButtons:GetChildren()) do
                if TButton:IsA("TextButton") then
                    library:tween(TButton.ImageLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        ImageColor3 = Color3.fromRGB(100, 100, 100)
                    })
                end
            end

            -- Hide all tab contents
            for _, Tab in pairs(Tabs:GetChildren()) do
                Tab.Visible = false
            end

            -- Select clicked tab
            TabContent.Visible = true
            selected_tab = TabButton
            library:tween(TabImage, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                ImageColor3 = Color3.fromRGB(84, 101, 255)
            })
        end)

        function tab.new_section(section_name)
            local section = {}

            -- Section Frame (left or right)
            local SectionFrame = library:create("Frame", {
                Name = section_name,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 100),
            }, TabContent)

            local SectionTitle = library:create("TextLabel", {
                Name = "SectionTitle",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 30),
                Font = Enum.Font.Ubuntu,
                Text = section_name,
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
            }, SectionFrame)

            -- Elements go here (Toggle, Button, etc.)
            function section.new_sector(sector_name)
                local sector = {}
                local SectorFrame = library:create("Frame", {
                    Name = sector_name,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 100),
                }, SectionFrame)

                local SectorTitle = library:create("TextLabel", {
                    Name = "SectorTitle",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 30),
                    Font = Enum.Font.Ubuntu,
                    Text = sector_name,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                }, SectorFrame)

                function sector.element(type, name, data, callback)
                    local element = {}
                    if type == "Button" then
                        local Button = library:create("TextButton", {
                            Name = name,
                            BackgroundTransparency = 1,
                            Size = UDim2.new(1, 0, 0, 30),
                            Font = Enum.Font.Ubuntu,
                            Text = name,
                            TextColor3 = Color3.fromRGB(255, 255, 255),
                            TextSize = 14,
                        }, SectorFrame)

                        Button.MouseButton1Down:Connect(function()
                            callback()
                        end)
                    elseif type == "Toggle" then
                        local toggle_state = data and data.Toggle or false
                        local Toggle = library:create("TextButton", {
                            Name = name,
                            BackgroundTransparency = 1,
                            Size = UDim2.new(1, 0, 0, 30),
                            Font = Enum.Font.Ubuntu,
                            Text = name .. ": " .. (toggle_state and "ON" or "OFF"),
                            TextColor3 = Color3.fromRGB(255, 255, 255),
                            TextSize = 14,
                        }, SectorFrame)

                        Toggle.MouseButton1Down:Connect(function()
                            toggle_state = not toggle_state
                            Toggle.Text = name .. ": " .. (toggle_state and "ON" or "OFF")
                            callback({Toggle = toggle_state})
                        end)
                    elseif type == "Slider" then
                        -- Implement slider code here
                    end
                    return element
                end

                return sector
            end

            return section
        end

        return tab
    end

    return menu
end

return library
