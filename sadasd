-- Signal class for handling events and signals
local HttpService = game:GetService("HttpService")

local Signal = {}
Signal.__index = Signal
Signal.ClassName = "Signal"

function Signal.new()
	local self = setmetatable({}, Signal)

	self._bindableEvent = Instance.new("BindableEvent")
	self._argMap = {}
	self._source = ""

	self._bindableEvent.Event:Connect(function(key)
		self._argMap[key] = nil
	end)

	return self
end

function Signal:Fire(...)
	local args = table.pack(...)
	local key = HttpService:GenerateGUID(false)
	self._argMap[key] = args
	self._bindableEvent:Fire(key)
end

function Signal:Connect(handler)
	return self._bindableEvent.Event:Connect(function(key)
		local args = self._argMap[key]
		if args then
			handler(table.unpack(args, 1, args.n))
		end
	end)
end

function Signal:Wait()
	local key = self._bindableEvent.Event:Wait()
	local args = self._argMap[key]
	if args then
		return table.unpack(args, 1, args.n)
	end
end

function Signal:Destroy()
	if self._bindableEvent then
		self._bindableEvent:Destroy()
		self._bindableEvent = nil
	end
end

-- UI Library Implementation
local library = {}
local TweenService = game:GetService("TweenService")
local uis = game:GetService("UserInputService")

function library:tween(...) TweenService:Create(...):Play() end
library.signal = Signal

function library:create(Object, Properties, Parent)
	local Obj = Instance.new(Object)
	for i, v in pairs(Properties) do
		Obj[i] = v
	end
	if Parent ~= nil then
		Obj.Parent = Parent
	end
	return Obj
end

local function create_draggable(gui)
	local dragging, dragInput, dragStart, startPos

	local function update(input)
		local delta = input.Position - dragStart
		gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end

	gui.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = gui.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	gui.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)

	uis.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end

function library.new(library_title)
	local menu = {}
	menu.values = {}
	menu.open = true

	local ScreenGui = library:create("ScreenGui", {
		ResetOnSpawn = false,
		ZIndexBehavior = Enum.ZIndexBehavior.Global,
		IgnoreGuiInset = true,
	}, game:GetService("CoreGui"))

	local ImageLabel = library:create("ImageButton", {
		AnchorPoint = Vector2.new(0.5, 0.5),
		BackgroundColor3 = Color3.fromRGB(15, 15, 15),
		BorderColor3 = Color3.fromRGB(78, 93, 234),
		Position = UDim2.new(0.5, 0, 0.5, 0),
		Size = UDim2.new(0, 700, 0, 500),
		Image = "http://www.roblox.com/asset/?id=7300333488",
		AutoButtonColor = false,
		Modal = true,
	}, ScreenGui)

	-- Minimize and Close functionality
	local isMinimized = false

	local function minimize_ui()
		if not isMinimized then
			TweenService:Create(ImageLabel, TweenInfo.new(0.5), {Size = UDim2.new(0, 700, 0, 30)}):Play()
		else
			TweenService:Create(ImageLabel, TweenInfo.new(0.5), {Size = UDim2.new(0, 700, 0, 500)}):Play()
		end
		isMinimized = not isMinimized
	end

	local minimize_button = library:create("TextButton", {
		Size = UDim2.new(0, 50, 0, 20),
		Position = UDim2.new(1, -110, 0, 5),
		BackgroundColor3 = Color3.fromRGB(15, 15, 15),
		BorderColor3 = Color3.fromRGB(78, 93, 234),
		Text = "-",
		TextColor3 = Color3.fromRGB(255, 255, 255),
	}, ImageLabel)

	minimize_button.MouseButton1Click:Connect(function()
		minimize_ui()
	end)

	-- Close button
	local close_button = library:create("TextButton", {
		Size = UDim2.new(0, 50, 0, 20),
		Position = UDim2.new(1, -60, 0, 5),
		BackgroundColor3 = Color3.fromRGB(15, 15, 15),
		BorderColor3 = Color3.fromRGB(78, 93, 234),
		Text = "X",
		TextColor3 = Color3.fromRGB(255, 255, 255),
	}, ImageLabel)

	close_button.MouseButton1Click:Connect(function()
		ScreenGui:Destroy()
	end)

	create_draggable(ImageLabel)

	local Title = library:create("TextLabel", {
		AnchorPoint = Vector2.new(0.5, 0),
		BackgroundTransparency = 1,
		Position = UDim2.new(0.5, 0, 0, 0),
		Size = UDim2.new(1, -22, 0, 30),
		Font = Enum.Font.Ubuntu,
		Text = library_title,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		TextSize = 16,
		TextXAlignment = Enum.TextXAlignment.Left,
		RichText = true,
	}, ImageLabel)

	-- Tab functionality
	local Tabs = {}
	function menu.new_tab(tab_image)
		local tab = {}
		tab.sections = {}

		local TabButton = library:create("TextButton", {
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			BackgroundTransparency = 1,
			Size = UDim2.new(0, 76, 0, 90),
			Text = "",
		}, ImageLabel)

		local TabImage = library:create("ImageLabel", {
			AnchorPoint = Vector2.new(0.5, 0.5),
			BackgroundTransparency = 1,
			Position = UDim2.new(0.5, 0, 0.5, 0),
			Size = UDim2.new(0, 32, 0, 32),
			Image = tab_image,
			ImageColor3 = Color3.fromRGB(100, 100, 100),
		}, TabButton)

		table.insert(Tabs, tab)

		function tab.new_section(section_name)
			local section = {}
			section.elements = {}

			local SectionFrame = library:create("Frame", {
				Name = "SectionFrame",
				BackgroundTransparency = 1,
				Size = UDim2.new(1, 0, 0, 40),
			}, ImageLabel)

			function section.element(type, text, data, callback)
				local element = {}

				if type == "Button" then
					local Button = library:create("TextButton", {
						Text = text,
						Size = UDim2.new(0, 200, 0, 50),
						BackgroundColor3 = Color3.fromRGB(25, 25, 25),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
					}, SectionFrame)

					Button.MouseButton1Click:Connect(function()
						callback()
					end)
				elseif type == "Toggle" then
					local ToggleButton = library:create("TextButton", {
						Text = text,
						Size = UDim2.new(0, 200, 0, 50),
						BackgroundColor3 = Color3.fromRGB(25, 25, 25),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
					}, SectionFrame)

					local state = false
					ToggleButton.MouseButton1Click:Connect(function()
						state = not state
						callback({Toggle = state})
					end)
				elseif type == "Slider" then
					local SliderFrame = library:create("Frame", {
						Size = UDim2.new(0, 200, 0, 50),
						BackgroundColor3 = Color3.fromRGB(25, 25, 25),
					}, SectionFrame)

					local Slider = library:create("TextLabel", {
						Text = text .. " " .. tostring(data.default.default),
						Size = UDim2.new(0, 200, 0, 50),
					}, SliderFrame)

					SliderFrame.InputChanged:Connect(function(input)
						local sliderValue = math.clamp(input.Position.X, data.default.min, data.default.max)
						callback({Slider = sliderValue})
					end)
				elseif type == "Dropdown" then
					local Dropdown = library:create("TextButton", {
						Text = text,
						Size = UDim2.new(0, 200, 0, 50),
						BackgroundColor3 = Color3.fromRGB(25, 25, 25),
					}, SectionFrame)

					Dropdown.MouseButton1Click:Connect(function()
						callback({Dropdown = data.options[1]})
					end)
				end

				table.insert(section.elements, element)
				return element
			end

			table.insert(tab.sections, section)
			return section
		end

		return tab
	end

	return menu
end

return library
