local library = {}

local TweenService = game:GetService("TweenService")
local uis = game:GetService("UserInputService")

-- Utility function to create UI elements
function library:create(Object, Properties, Parent)
    local Obj = Instance.new(Object)
    for i, v in pairs(Properties) do
        Obj[i] = v
    end
    if Parent then
        Obj.Parent = Parent
    end
    return Obj
end

-- Utility to tween properties
function library:tween(object, tweenInfo, properties)
    local tween = TweenService:Create(object, tweenInfo, properties)
    tween:Play()
end

-- Function to make a GUI draggable
local function set_draggable(gui)
    local dragging, dragInput, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    gui.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = gui.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    gui.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    uis.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Main UI creation function
function library.new(library_title)
    local menu = {}
    menu.values = {}

    -- Create ScreenGui
    local ScreenGui = library:create("ScreenGui", {
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global,
        Name = "LibraryUI",
        IgnoreGuiInset = true,
    }, game:GetService("CoreGui"))

    -- Main Frame (UI Window)
    local MainFrame = library:create("Frame", {
        Name = "MainFrame",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(15, 15, 15),
        BorderColor3 = Color3.fromRGB(78, 93, 234),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(0, 550, 0, 400),
        ZIndex = 2,
    }, ScreenGui)

    set_draggable(MainFrame)

    -- UI Title
    local Title = library:create("TextLabel", {
        Name = "Title",
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0, 0),
        Size = UDim2.new(1, -22, 0, 30),
        Font = Enum.Font.Ubuntu,
        Text = library_title,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Center,
    }, MainFrame)

    -- Tab Buttons Frame
    local TabButtons = library:create("Frame", {
        Name = "TabButtons",
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 40),
        Size = UDim2.new(0, 80, 1, -50),
    }, MainFrame)

    local UIListLayout = library:create("UIListLayout", {
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5), -- Add some padding for cleaner alignment
    }, TabButtons)

    -- Tabs Frame
    local Tabs = library:create("Frame", {
        Name = "Tabs",
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 100, 0, 40),
        Size = UDim2.new(1, -110, 1, -50),
    }, MainFrame)

    -- Minimize and Delete button
    local MinimizeButton = library:create("TextButton", {
        Name = "Minimize",
        AnchorPoint = Vector2.new(1, 0),
        BackgroundColor3 = Color3.fromRGB(15, 15, 15),
        BorderSizePixel = 0,
        Position = UDim2.new(1, -30, 0, 5),
        Size = UDim2.new(0, 20, 0, 20),
        Text = "-",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        Font = Enum.Font.Ubuntu,
        TextSize = 14,
    }, MainFrame)

    local DeleteButton = library:create("TextButton", {
        Name = "Delete",
        AnchorPoint = Vector2.new(1, 0),
        BackgroundColor3 = Color3.fromRGB(15, 15, 15),
        BorderSizePixel = 0,
        Position = UDim2.new(1, -5, 0, 5),
        Size = UDim2.new(0, 20, 0, 20),
        Text = "X",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        Font = Enum.Font.Ubuntu,
        TextSize = 14,
    }, MainFrame)

    -- Minimize functionality
    local minimized = false
    local initialSize = MainFrame.Size
    MinimizeButton.MouseButton1Down:Connect(function()
        minimized = not minimized
        if minimized then
            library:tween(MainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(0, 550, 0, 30)})
            for _, child in pairs(MainFrame:GetChildren()) do
                if child.Name ~= "Minimize" and child.Name ~= "Delete" and child.Name ~= "Title" then
                    child.Visible = false
                end
            end
            MinimizeButton.Text = "+"
        else
            library:tween(MainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = initialSize})
            for _, child in pairs(MainFrame:GetChildren()) do
                if child.Name ~= "Minimize" and child.Name ~= "Delete" then
                    child.Visible = true
                end
            end
            MinimizeButton.Text = "-"
        end
    end)

    -- Delete functionality
    DeleteButton.MouseButton1Down:Connect(function()
        ScreenGui:Destroy()
    end)

    -- Tab management
    local selected_tab

    function menu.new_tab(tab_image)
        local tab = {}
        local TabButton = library:create("TextButton", {
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 60, 0, 60),
            Text = "",
        }, TabButtons)

        local TabImage = library:create("ImageLabel", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundTransparency = 1,
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Size = UDim2.new(0, 32, 0, 32),
            Image = tab_image,
            ImageColor3 = Color3.fromRGB(100, 100, 100),
        }, TabButton)

        local TabContent = library:create("Frame", {
            Name = "Tab",
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Visible = false,
        }, Tabs)

        -- First tab selected by default
        if not selected_tab then
            selected_tab = TabButton
            TabImage.ImageColor3 = Color3.fromRGB(84, 101, 255)
            TabContent.Visible = true
        end

        -- TabButton Logic
        TabButton.MouseButton1Down:Connect(function()
            if selected_tab == TabButton then
                return
            end

            -- Unselect all tabs
            for _, TButton in pairs(TabButtons:GetChildren()) do
                if TButton:IsA("TextButton") then
                    TButton.ImageLabel.ImageColor3 = Color3.fromRGB(100, 100, 100)
                end
            end

            -- Hide all tab contents
            for _, Tab in pairs(Tabs:GetChildren()) do
                Tab.Visible = false
            end

            -- Select clicked tab
            TabContent.Visible = true
            selected_tab = TabButton
            TabImage.ImageColor3 = Color3.fromRGB(84, 101, 255)
        end)

        -- Sections for tab
        function tab.new_section(section_name)
            local section = {}
            local SectionFrame = library:create("Frame", {
                Name = section_name,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 100),
            }, TabContent)

            local SectionTitle = library:create("TextLabel", {
                Name = "SectionTitle",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 30),
                Font = Enum.Font.Ubuntu,
                Text = section_name,
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
            }, SectionFrame)

            function section.new_sector(sector_name)
                local sector = {}
                local SectorFrame = library:create("Frame", {
                    Name = sector_name,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 100),
                }, SectionFrame)

                local SectorTitle = library:create("TextLabel", {
                    Name = "SectorTitle",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 30),
                    Font = Enum.Font.Ubuntu,
                    Text = sector_name,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                }, SectorFrame)

                return sector
            end

            return section
        end

        return tab
    end

    return menu
end

return library
