local library = {}

local TweenService = game:GetService("TweenService")
function library:tween(...) TweenService:Create(...):Play() end

local uis = game:GetService("UserInputService")
library.signal = loadstring(game:HttpGet("https://raw.githubusercontent.com/Asstricks/21bitcheswantingmycock/main/AntiFemboy"))()
function library:create(Object, Properties, Parent)
    local Obj = Instance.new(Object)

    for i,v in pairs (Properties) do
        Obj[i] = v
    end
    if Parent ~= nil then
        Obj.Parent = Parent
    end

    return Obj
end

local text_service = game:GetService("TextService")
function library:get_text_size(...)
    return text_service:GetTextSize(...)
end

function library:console(func)
    func(("\n"):rep(57))
end

local local_player = game:GetService("Players").LocalPlayer
local mouse = local_player:GetMouse()

local http = game:GetService("HttpService")
local rs = game:GetService("RunService")

function library:set_draggable(gui)
    local UserInputService = game:GetService("UserInputService")

    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    gui.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = gui.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    gui.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

function library.new(library_title, cfg_location)
    local menu = {}
    menu.values = {}
    menu.on_load_cfg = library.signal.new("on_load_cfg")

    if not isfolder(cfg_location) then
        makefolder(cfg_location)
    end
    
    function menu.copy(original)
        local copy = {}
        for k, v in pairs(original) do
            if type(v) == "table" then
                v = menu.copy(v)
            end
            copy[k] = v
        end
        return copy
    end
    function menu.save_cfg(cfg_name)
        local values_copy = menu.copy(menu.values)
        for _,tab in next, values_copy do
            for _,section in next, tab do
                for _,sector in next, section do
                    for _,element in next, sector do
                        if not element.Color then continue end

                        element.Color = {R = element.Color.R, G = element.Color.G, B = element.Color.B}
                    end
                end
            end
        end

        writefile(cfg_location..cfg_name..".txt", http:JSONEncode(values_copy))
    end
    function menu.load_cfg(cfg_name)
        local new_values = http:JSONDecode(readfile(cfg_location..cfg_name..".txt"))

        for _,tab in next, new_values do
            for _2,section in next, tab do
                for _3,sector in next, section do
                    for _4,element in next, sector do
                        if element.Color then
                            element.Color = Color3.new(element.Color.R, element.Color.G, element.Color.B)
                        end

                        pcall(function()
                            menu.values[_][_2][_3][_4] = element
                        end)
                    end
                end
            end
        end

        menu.on_load_cfg:Fire()
    end

    menu.open = true
    local ScreenGui = library:create("ScreenGui", {
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global,
        Name = "unknown",
        IgnoreGuiInset = true,
    })

    if syn then
        syn.protect_gui(ScreenGui)
    end

    ScreenGui.Parent = game:GetService("CoreGui")

    function menu.IsOpen()
        return menu.open
    end
    function menu.SetOpen(State)
        ScreenGui.Enabled = state
    end

    uis.InputBegan:Connect(function(key)
        if key.KeyCode ~= Enum.KeyCode.Insert then return end

        ScreenGui.Enabled = not ScreenGui.Enabled
        menu.open = ScreenGui.Enabled

        while ScreenGui.Enabled do
            uis.MouseIconEnabled = true
            rs.RenderStepped:Wait()
        end
    end)

    local ImageLabel = library:create("ImageButton", {
        Name = "Main",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(15, 15, 15),
        BorderColor3 = Color3.fromRGB(78, 93, 234),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(0, 700, 0, 500),
        Image = "http://www.roblox.com/asset/?id=7300333488",
        AutoButtonColor = false,
        Modal = true,
    }, ScreenGui)

    -- Minimize and Close buttons integration starts here
    -- Helper function to create a button
    function create_button(name, text, position, parent, callback)
        local button = Instance.new("TextButton")
        button.Name = name
        button.Text = text
        button.Size = UDim2.new(0, 50, 0, 20)
        button.Position = position
        button.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.Parent = parent

        button.MouseButton1Click:Connect(callback)

        return button
    end

    -- Minimize function
    function minimize_ui(menu)
        local tween_info = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local target_position = UDim2.new(0.5, 0, 0, 0) -- Move to the top of the screen
        local tween = TweenService:Create(menu, tween_info, {Position = target_position})
        tween:Play()
    end

    -- Close function (destroy UI)
    function close_ui(menu)
        menu:Destroy()
    end

    -- Create minimize and close buttons in the top-right corner of ImageLabel
    local minimize_button = create_button("MinimizeButton", "_", UDim2.new(1, -110, 0, 5), ImageLabel, function()
        minimize_ui(ImageLabel)
    end)

    local close_button = create_button("CloseButton", "X", UDim2.new(1, -60, 0, 5), ImageLabel, function()
        close_ui(ImageLabel)
    end)
    -- Minimize and Close buttons integration ends here

    library:set_draggable(ImageLabel)

    -- Simplified Slider Implementation (Fix)
    function create_slider(min, max, default_value, container)
        local slider_frame = Instance.new("Frame")
        slider_frame.Size = UDim2.new(0, 260, 0, 30)
        slider_frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
        slider_frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
        slider_frame.Parent = container

        local slider_value = Instance.new("TextLabel")
        slider_value.Size = UDim2.new(0, 50, 1, 0)
        slider_value.Position = UDim2.new(1, -60, 0, 0)
        slider_value.BackgroundTransparency = 1
        slider_value.TextColor3 = Color3.fromRGB(255, 255, 255)
        slider_value.Text = tostring(default_value)
        slider_value.Parent = slider_frame

        local slider_bar = Instance.new("Frame")
        slider_bar.Size = UDim2.new(0, 200, 0, 5)
        slider_bar.Position = UDim2.new(0, 10, 0.5, -2)
        slider_bar.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
        slider_bar.Parent = slider_frame

        local slider_handle = Instance.new("Frame")
        slider_handle.Size = UDim2.new(0, 10, 0, 20)
        slider_handle.Position = UDim2.new((default_value - min) / (max - min), -5, 0.5, -10)
        slider_handle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        slider_handle.Parent = slider_bar

        local dragging = false

        -- Update slider position and value
        local function update_slider(input)
            local mouse_position = math.clamp(input.X - slider_bar.AbsolutePosition.X, 0, slider_bar.AbsoluteSize.X)
            local value = math.floor((mouse_position / slider_bar.AbsoluteSize.X) * (max - min) + min)
            slider_value.Text = tostring(value)
            slider_handle.Position = UDim2.new(mouse_position / slider_bar.AbsoluteSize.X, -5, 0.5, -10)
        end

        -- Handle input
        slider_handle.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
            end
        end)

        uis.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                update_slider(input)
            end
        end)

        uis.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
    end

    -- Example usage:
    -- You can call this function to create a slider inside any container.
    -- Example: create_slider(0, 100, 50, ImageLabel)

    -- Your original tabs, sections, and UI elements code continues here...

    -- Example of how you might use the slider in a section:
    local tab = menu.new_tab("rbxassetid://6031075938")
    local section = tab.new_section("Settings")
    local slider_container = library:create("Frame", {Size = UDim2.new(1, 0, 0, 100)}, section)
    
    create_slider(0, 100, 50, slider_container) -- Example slider with min=0, max=100, default=50.

    return menu
end

return library

