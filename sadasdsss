local library = {}

local TweenService = game:GetService("TweenService")
function library:tween(...) TweenService:Create(...):Play() end

local uis = game:GetService("UserInputService")
library.signal = loadstring(game:HttpGet("https://raw.githubusercontent.com/Asstricks/21bitcheswantingmycock/main/AntiFemboy"))()

function library:create(Object, Properties, Parent)
    local Obj = Instance.new(Object)

    for i,v in pairs (Properties) do
        Obj[i] = v
    end
    if Parent ~= nil then
        Obj.Parent = Parent
    end

    return Obj
end

function library:set_draggable(gui)
    local UserInputService = game:GetService("UserInputService")

    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    gui.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = gui.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    gui.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- This is where we add the new logic for minimize/maximize and a nicely styled close button.
function library.new(library_title, cfg_location)
    local menu = {}
    menu.values = {}
    menu.open = true
    menu.minimized = false  -- To keep track of minimized state

    -- Create ScreenGui
    local ScreenGui = library:create("ScreenGui", {
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global,
        Name = "unknown",
        IgnoreGuiInset = true,
    })
    
    -- Synapse/Xen Support
    if syn then
        syn.protect_gui(ScreenGui)
    end
    ScreenGui.Parent = game:GetService("CoreGui")

    -- Main Frame (for UI)
    local MainFrame = library:create("ImageButton", {
        Name = "Main",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(15, 15, 15),
        BorderColor3 = Color3.fromRGB(78, 93, 234),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(0, 700, 0, 500),
        Image = "http://www.roblox.com/asset/?id=7300333488",
        AutoButtonColor = false,
        Modal = true,
    }, ScreenGui)

    -- Top Bar for Minimize/Close buttons
    local TopBar = library:create("Frame", {
        Name = "TopBar",
        BackgroundColor3 = Color3.fromRGB(15, 15, 15),
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 30),
        Position = UDim2.new(0, 0, 0, 0),
    }, MainFrame)

    -- Title
    local Title = library:create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0, 0),
        Size = UDim2.new(0.8, 0, 1, 0),
        Font = Enum.Font.Ubuntu,
        Text = library_title,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
    }, TopBar)

    -- Close Button (Styled)
    local CloseButton = library:create("TextButton", {
        Name = "CloseButton",
        BackgroundColor3 = Color3.fromRGB(200, 50, 50),  -- Styled red, matching the UI theme
        BorderSizePixel = 0,
        Position = UDim2.new(1, -40, 0, 0),
        Size = UDim2.new(0, 40, 1, 0),
        Font = Enum.Font.Ubuntu,
        Text = "X",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 18,
    }, TopBar)

    -- Minimize Button
    local MinimizeButton = library:create("TextButton", {
        Name = "MinimizeButton",
        BackgroundColor3 = Color3.fromRGB(84, 101, 255), -- Styled matching the theme
        BorderSizePixel = 0,
        Position = UDim2.new(1, -80, 0, 0),
        Size = UDim2.new(0, 40, 1, 0),
        Font = Enum.Font.Ubuntu,
        Text = "-",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 18,
    }, TopBar)

    -- Minimize Button functionality to hide everything except the top bar
    MinimizeButton.MouseButton1Click:Connect(function()
        if not menu.minimized then
            -- Minimize the UI (hide all elements except top bar)
            library:tween(MainFrame, TweenInfo.new(0.5), {Size = UDim2.new(0, 700, 0, 30)})
        else
            -- Restore the UI
            library:tween(MainFrame, TweenInfo.new(0.5), {Size = UDim2.new(0, 700, 0, 500)})
        end
        menu.minimized = not menu.minimized
    end)

    -- Close Button functionality
    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)

    -- Make the main frame draggable
    library:set_draggable(MainFrame)

    -- Function for creating tabs, sections, and elements
    function menu.new_tab(tab_image)
        local tab = {}
        -- (Tab creation code will go here, unchanged from the original UI base)
    end

    return menu
end

return library
