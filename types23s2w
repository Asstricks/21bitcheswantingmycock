-- ======= Roblox GUI Library with Top Bar Integration =======

local library = {}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local TextService = game:GetService("TextService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local mouse = LocalPlayer:GetMouse()
local http = game:GetService("HttpService")
local rs = game:GetService("RunService")
local uis = game:GetService("UserInputService")

-- Utilities
function library:create(Object, Properties, Parent)
    local Obj = Instance.new(Object)

    for i, v in pairs(Properties) do
        Obj[i] = v
    end
    if Parent ~= nil then
        Obj.Parent = Parent
    end

    return Obj
end

function library:tween(tweenObj, tweenInfo, properties)
    local tween = TweenService:Create(tweenObj, tweenInfo, properties)
    tween:Play()
end

function library:set_draggable(gui)
    local dragging
    local dragInput
    local dragStart
    local startPos

    gui.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = gui.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    gui.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

-- Signal Handling
library.signal = loadstring(game:HttpGet("https://raw.githubusercontent.com/Asstricks/21bitcheswantingmycock/main/AntiFemboy"))()

-- Text Size Utility
function library:get_text_size(...)
    return TextService:GetTextSize(...)
end

-- Console Utility
function library:console(func)
    func(("\n"):rep(57))
end

-- Configuration Management
function library:new_signal()
    local signal = {}
    signal.Event = Instance.new("BindableEvent")
    signal.Fire = signal.Event.Fire
    signal.Connect = signal.Event.Connect
    return signal
end

-- Main Library Function
function library.new(library_title, cfg_location)
    local menu = {}
    menu.values = {}
    menu.on_load_cfg = library:new_signal()

    -- Configuration Folder Setup (Optional)
    if not isfolder(cfg_location) then
        makefolder(cfg_location)
    end

    function menu.copy(original)
        local copy = {}
        for k, v in pairs(original) do
            if type(v) == "table" then
                v = menu.copy(v)
            end
            copy[k] = v
        end
        return copy
    end

    function menu.save_cfg(cfg_name)
        local values_copy = menu.copy(menu.values)
        for _, tab in next, values_copy do
            for _, section in next, tab do
                for _, sector in next, section do
                    for _, element in next, sector do
                        if not element.Color then continue end

                        element.Color = {R = element.Color.R, G = element.Color.G, B = element.Color.B}
                    end
                end
            end
        end

        writefile(cfg_location .. cfg_name .. ".txt", http:JSONEncode(values_copy))
    end

    function menu.load_cfg(cfg_name)
        local new_values = http:JSONDecode(readfile(cfg_location .. cfg_name .. ".txt"))

        for _, tab in next, new_values do
            for _2, section in next, tab do
                for _3, sector in next, section do
                    for _4, element in next, sector do
                        if element.Color then
                            element.Color = Color3.new(element.Color.R, element.Color.G, element.Color.B)
                        end

                        pcall(function()
                            menu.values[_][_2][_3][_4] = element
                        end)
                    end
                end
            end
        end

        menu.on_load_cfg:Fire()
    end

    -- Create ScreenGui
    local ScreenGui = library:create("ScreenGui", {
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global,
        Name = "unknown",
        IgnoreGuiInset = true,
    })

    if syn and syn.protect_gui then
        syn.protect_gui(ScreenGui)
    end

    ScreenGui.Parent = game:GetService("CoreGui")

    -- Create Main Frame
    local ImageLabel = library:create("ImageButton", {
        Name = "Main",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(15, 15, 15),
        BorderColor3 = Color3.fromRGB(78, 93, 234),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(0, 700, 0, 500),
        Image = "http://www.roblox.com/asset/?id=7300333488",
        AutoButtonColor = false,
        Modal = true,
    }, ScreenGui)

    -- ======= Create Top Bar =======

    -- Create Top Bar Frame
    local TopBar = library:create("Frame", {
        Name = "TopBar",
        BackgroundColor3 = Color3.fromRGB(30, 30, 30), -- Dark gray background
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 30), -- Full width of Main, height 30px
        Position = UDim2.new(0, 0, 0, 0), -- Anchored to the top of Main
    }, ImageLabel)

    -- Create Title TextLabel (Moved into TopBar)
    local Title = library:create("TextLabel", {
        Name = "Title",
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0, 0),
        Size = UDim2.new(1, -22, 0, 30),
        Font = Enum.Font.Ubuntu,
        Text = library_title,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        RichText = true,
    }, TopBar)

    -- Create Minimize Button (-): Positioned 60 pixels from the right edge of the Top Bar.
    local MinimizeButton = library:create("TextButton", {
        Name = "MinimizeButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -60, 0, 5), -- 60 pixels from the right edge, 5 pixels from the top
        Size = UDim2.new(0, 20, 0, 20),
        Font = Enum.Font.SourceSans,
        Text = "-",
        TextColor3 = Color3.fromRGB(150, 150, 150),
        TextSize = 18,
        TextStrokeTransparency = 1,
        ZIndex = 2, -- Ensure the button is above other UI elements
    }, TopBar)

    -- Create Extend Button (+): Positioned identically to MinimizeButton but initially hidden.
    local ExtendButton = library:create("TextButton", {
        Name = "ExtendButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -60, 0, 5), -- Same position as MinimizeButton
        Size = UDim2.new(0, 20, 0, 20),
        Font = Enum.Font.SourceSans,
        Text = "+",
        TextColor3 = Color3.fromRGB(150, 150, 150),
        TextSize = 18,
        TextStrokeTransparency = 1,
        Visible = false, -- Hidden initially
        ZIndex = 2,
    }, TopBar)

    -- Create Exit Button (X): Positioned 30 pixels from the right edge, visible alongside MinimizeButton.
    local ExitButton = library:create("TextButton", {
        Name = "ExitButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -30, 0, 5), -- 30 pixels from the right edge
        Size = UDim2.new(0, 20, 0, 20),
        Font = Enum.Font.SourceSans,
        Text = "X",
        TextColor3 = Color3.fromRGB(150, 150, 150),
        TextSize = 18,
        TextStrokeTransparency = 1,
        ZIndex = 2,
    }, TopBar)

    -- Make TopBar Draggable
    library:set_draggable(TopBar)

    -- ======= Button Functionalities =======

    -- Store the original size of MainFrame
    local originalMainSize = ImageLabel.Size

    -- Variable to track minimized state
    local isMinimized = false

    -- Function to Minimize the Menu
    local function minimizeMenu()
        if isMinimized then return end
        isMinimized = true

        -- Tween the Main frame to reduce its height to the TopBar's height
        local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        library:tween(ImageLabel, tweenInfo, {
            Size = UDim2.new(originalMainSize.X.Scale, originalMainSize.X.Offset, 0, TopBar.Size.Y.Offset)
        })

        -- Hide all children of Main frame except TopBar
        for _, child in ipairs(ImageLabel:GetChildren()) do
            if child ~= TopBar then
                child.Visible = false
            end
        end

        -- Toggle button visibility
        MinimizeButton.Visible = false
        ExtendButton.Visible = true
    end

    -- Function to Extend the Menu
    local function extendMenu()
        if not isMinimized then return end
        isMinimized = false

        -- Tween the Main frame back to original size
        local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        library:tween(ImageLabel, tweenInfo, {
            Size = originalMainSize
        })

        -- Show all children of Main frame except TopBar
        for _, child in ipairs(ImageLabel:GetChildren()) do
            if child ~= TopBar then
                child.Visible = true
            end
        end

        -- Toggle button visibility
        MinimizeButton.Visible = true
        ExtendButton.Visible = false
    end

    -- Function to Exit the Menu
    local function exitMenu()
        -- Tween the Main frame to fade out
        local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        library:tween(ImageLabel, tweenInfo, {
            BackgroundTransparency = 1,
            Visible = false
        })

        -- Optionally, destroy the Main frame after tweening
        RunService.RenderStepped:Wait(0.3) -- Wait for the tween to complete
        ImageLabel:Destroy()
    end

    -- Connect Buttons to Their Functions
    MinimizeButton.MouseButton1Click:Connect(minimizeMenu)
    ExtendButton.MouseButton1Click:Connect(extendMenu)
    ExitButton.MouseButton1Click:Connect(exitMenu)

    -- ======= Toggle GUI Visibility with Insert Key =======

    uis.InputBegan:Connect(function(key)
        if key.KeyCode ~= Enum.KeyCode.Insert then return end

        ScreenGui.Enabled = not ScreenGui.Enabled
        menu.open = ScreenGui.Enabled

        while ScreenGui.Enabled do
            uis.MouseIconEnabled = true
            rs.RenderStepped:Wait()
        end
    end)

    -- ======= Create Tab Buttons and Tabs =======

    local TabButtons = library:create("Frame", {
        Name = "TabButtons",
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 12, 0, 41),
        Size = UDim2.new(0, 76, 0, 447),
    }, ImageLabel)

    local UIListLayout_TabButtons = library:create("UIListLayout", {
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
    }, TabButtons)

    local Tabs = library:create("Frame", {
        Name = "Tabs",
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 102, 0, 42),
        Size = UDim2.new(0, 586, 0, 446),
    }, ImageLabel)

    local is_first_tab = true
    local selected_tab
    local tab_num = 1

    function menu.new_tab(tab_image)
        local tab = {tab_num = tab_num}
        menu.values[tab_num] = {}
        tab_num = tab_num + 1

        local TabButton = library:create("TextButton", {
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 76, 0, 90),
            Text = "",
        }, TabButtons)

        local TabImage = library:create("ImageLabel", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundTransparency = 1,
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Size = UDim2.new(0, 32, 0, 32),
            Image = tab_image,
            ImageColor3 = Color3.fromRGB(100, 100, 100),
        }, TabButton)

        local Tab = library:create("Frame", {
            Name = "Tab",
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Visible = false,
        }, Tabs)

        local TabSections = library:create("Frame", {
            Name = "TabSections",
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 0, 28),
            ClipsDescendants = true,
        }, Tab)

        local UIListLayout_TabSections = library:create("UIListLayout", {
            FillDirection = Enum.FillDirection.Horizontal,
            HorizontalAlignment = Enum.HorizontalAlignment.Center,
            SortOrder = Enum.SortOrder.LayoutOrder,
        }, TabSections)

        local TabFrames = library:create("Frame", {
            Name = "TabFrames",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 0, 0, 29),
            Size = UDim2.new(1, 0, 0, 418),
        }, Tab)

        if is_first_tab then
            is_first_tab = false
            selected_tab = TabButton

            library:tween(TabImage, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.fromRGB(84, 101, 255)})
            Tab.Visible = true
        end

        TabButton.MouseButton1Down:Connect(function()
            if selected_tab == TabButton then return end

            for _, TButtons in pairs(TabButtons:GetChildren()) do
                if not TButtons:IsA("TextButton") then continue end

                local childImage = TButtons:FindFirstChildOfClass("ImageLabel")
                if childImage then
                    library:tween(childImage, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.fromRGB(100, 100, 100)})
                end
            end

            for _, Tab in pairs(Tabs:GetChildren()) do
                Tab.Visible = false
            end
            Tab.Visible = true
            selected_tab = TabButton
            library:tween(TabImage, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.fromRGB(84, 101, 255)})
        end)

        TabButton.MouseEnter:Connect(function()
            if selected_tab == TabButton then return end

            library:tween(TabImage, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.fromRGB(255, 255, 255)})
        end)

        TabButton.MouseLeave:Connect(function()
            if selected_tab == TabButton then return end

            library:tween(TabImage, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.fromRGB(100, 100, 100)})
        end)

        local is_first_section = true
        local num_sections = 0
        local selected_section

        function tab.new_section(section_name)
            local section = {}

            num_sections += 1

            menu.values[tab.tab_num][section_name] = {}

            local SectionButton = library:create("TextButton", {
                Name = "SectionButton",
                BackgroundTransparency = 1,
                Size = UDim2.new(1 / num_sections, 0, 1, 0),
                Font = Enum.Font.Ubuntu,
                Text = section_name,
                TextColor3 = Color3.fromRGB(100, 100, 100),
                TextSize = 15,
            }, TabSections)

            for _, SectionButtons in pairs(TabSections:GetChildren()) do
                if SectionButtons:IsA("UIListLayout") then continue end

                SectionButtons.Size = UDim2.new(1 / num_sections, 0, 1, 0)
            end

            SectionButton.MouseEnter:Connect(function()
                if selected_section == SectionButton then return end

                library:tween(SectionButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
            end)

            SectionButton.MouseLeave:Connect(function()
                if selected_section == SectionButton then return end

                library:tween(SectionButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(100, 100, 100)})
            end)

            local SectionDecoration = library:create("Frame", {
                Name = "SectionDecoration",
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 0, 27),
                Size = UDim2.new(1, 0, 0, 1),
                Visible = false,
            }, SectionButton)

            local UIGradient_SectionDecoration = library:create("UIGradient", {
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(32, 33, 38)),
                    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(81, 97, 243)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(32, 33, 38))
                },
            }, SectionDecoration)

            local SectionFrame = library:create("Frame", {
                Name = "SectionFrame",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 1, 0),
                Visible = false,
            }, TabFrames)

            local Left = library:create("Frame", {
                Name = "Left",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 8, 0, 14),
                Size = UDim2.new(0, 282, 0, 395),
            }, SectionFrame)

            local UIListLayout_Left = library:create("UIListLayout", {
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 12),
            }, Left)

            local Right = library:create("Frame", {
                Name = "Right",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 298, 0, 14),
                Size = UDim2.new(0, 282, 0, 395),
            }, SectionFrame)

            local UIListLayout_Right = library:create("UIListLayout", {
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 12),
            }, Right)

            SectionButton.MouseButton1Down:Connect(function()
                for _, SectionButtons in pairs(TabSections:GetChildren()) do
                    if SectionButtons:IsA("UIListLayout") then continue end
                    library:tween(SectionButtons, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(100, 100, 100)})
                    SectionButtons.SectionDecoration.Visible = false
                end
                for _, TabFrame in pairs(TabFrames:GetChildren()) do
                    if not TabFrame:IsA("Frame") then continue end

                    TabFrame.Visible = false
                end

                selected_section = SectionButton
                SectionFrame.Visible = true
                library:tween(SectionButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(84, 101, 255)})
                SectionDecoration.Visible = true
            end)

            if is_first_section then
                is_first_section = false
                selected_section = SectionButton

                SectionButton.TextColor3 = Color3.fromRGB(84, 101, 255) 

                SectionDecoration.Visible = true
                SectionFrame.Visible = true
            end

            function section.new_sector(sector_name, sector_side)
                local sector = {}

                local actual_side = sector_side == "Right" and Right or Left
                menu.values[tab.tab_num][section_name][sector_name] = {}

                local Border = library:create("Frame", {
                    BackgroundColor3 = Color3.fromRGB(5, 5, 5),
                    BorderColor3 = Color3.fromRGB(30, 30, 30),
                    Size = UDim2.new(1, 0, 0, 20),
                }, actual_side)

                local Container = library:create("Frame", {
                    BackgroundColor3 = Color3.fromRGB(10, 10, 10),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 1, 0, 1),
                    Size = UDim2.new(1, -2, 1, -2),
                }, Border)

                local UIListLayout_Container = library:create("UIListLayout", {
                    HorizontalAlignment = Enum.HorizontalAlignment.Center,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                }, Container)

                local UIPadding_Container = library:create("UIPadding", {
                    PaddingTop = UDim.new(0, 12),
                }, Container)

                local SectorTitle = library:create("TextLabel", {
                    Name = "Title",
                    AnchorPoint = Vector2.new(0.5, 0),
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0.5, 0, 0, -8),
                    Size = UDim2.new(1, 0, 0, 15),
                    Font = Enum.Font.Ubuntu,
                    Text = sector_name,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                }, Border)

                function sector.create_line(thickness)
                    thickness = thickness or 3
                    Border.Size = Border.Size + UDim2.new(0, 0, 0, thickness * 3)

                    local LineFrame = library:create("Frame", {
                        Name = "LineFrame",
                        BackgroundTransparency = 1,
                        Position = UDim2.new(0, 0, 0, 0),
                        Size = UDim2.new(0, 250, 0, thickness * 3),
                    }, Container)

                    local Line = library:create("Frame", {
                        Name = "Line",
                        BackgroundColor3 = Color3.fromRGB(25, 25, 25),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Position = UDim2.new(0.5, 0, 0.5, 0),
                        AnchorPoint = Vector2.new(0.5, 0.5),
                        Size = UDim2.new(1, 0, 0, thickness),
                    }, LineFrame)
                end

                function sector.element(type, text, data, callback, c_flag)
                    text, data, callback = text and text or type, data and data or {}, callback and callback or function() end

                    local value = {}

                    local flag = c_flag and text .. " " .. c_flag or text
                    menu.values[tab.tab_num][section_name][sector_name][flag] = value

                    local function do_callback()
                        menu.values[tab.tab_num][section_name][sector_name][flag] = value
                        callback(value)
                    end

                    local default = data.default and data.default

                    local element = {}

                    function element:get_value()
                        return value
                    end

                    if type == "Toggle" then
                        -- [Existing Toggle Code]
                        -- Ensure all existing Toggle functionalities remain intact
                        -- [Omitted here for brevity]
                        -- Integrate as per your existing code
                        -- ...
                    elseif type == "Dropdown" then
                        -- [Existing Dropdown Code]
                        -- Ensure all existing Dropdown functionalities remain intact
                        -- [Omitted here for brevity]
                        -- Integrate as per your existing code
                        -- ...
                    elseif type == "Combo" then
                        -- [Existing Combo Code]
                        -- Ensure all existing Combo functionalities remain intact
                        -- [Omitted here for brevity]
                        -- Integrate as per your existing code
                        -- ...
                    elseif type == "Button" then
                        -- [Existing Button Code]
                        -- Ensure all existing Button functionalities remain intact
                        -- [Omitted here for brevity]
                        -- Integrate as per your existing code
                        -- ...
                    elseif type == "TextBox" then
                        -- [Existing TextBox Code]
                        -- Ensure all existing TextBox functionalities remain intact
                        -- [Omitted here for brevity]
                        -- Integrate as per your existing code
                        -- ...
                    elseif type == "Scroll" then
                        -- [Existing Scroll Code]
                        -- Ensure all existing Scroll functionalities remain intact
                        -- [Omitted here for brevity]
                        -- Integrate as per your existing code
                        -- ...
                    elseif type == "Slider" then
                        -- [Existing Slider Code]
                        -- Ensure all existing Slider functionalities remain intact
                        -- [Omitted here for brevity]
                        -- Integrate as per your existing code
                        -- ...
                        Border.Size = Border.Size + UDim2.new(0, 0, 0, 35)

                        value = {Slider = default and default.default or 0}

                        local min, max = default and default.min or 0, default and default.max or 100

                        local Slider = library:create("Frame", {
                            Name = "Slider",
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            BackgroundTransparency = 1,
                            Size = UDim2.new(1, 0, 0, 35),
                        }, Container)

                        function element:set_visible(bool)
                            if bool then
                                if Slider.Visible then return end
                                Border.Size = Border.Size + UDim2.new(0, 0, 0, 35)
                                Slider.Visible = true
                            else
                                if not Slider.Visible then return end
                                Border.Size = Border.Size + UDim2.new(0, 0, 0, -35)
                                Slider.Visible = false
                            end
                        end

                        local SliderText = library:create("TextLabel", {
                            Name = "SliderText",
                            BackgroundTransparency = 1,
                            Position = UDim2.new(0, 9, 0, 6),
                            Size = UDim2.new(0, 200, 0, 9),
                            Font = Enum.Font.Ubuntu,
                            Text = text,
                            TextColor3 = Color3.fromRGB(150, 150, 150),
                            TextSize = 14,
                            TextXAlignment = Enum.TextXAlignment.Left,
                        }, Slider)

                        local SliderButton = library:create("TextButton", {
                            Name = "SliderButton",
                            BackgroundColor3 = Color3.fromRGB(25, 25, 25),
                            BorderColor3 = Color3.fromRGB(0, 0, 0),
                            Position = UDim2.new(0, 9, 0, 20),
                            Size = UDim2.new(0, 260, 0, 10),
                            AutoButtonColor = false,
                            Font = Enum.Font.SourceSans,
                            Text = "",
                        }, Slider)

                        local SliderFrame = library:create("Frame", {
                            Name = "SliderFrame",
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            BorderSizePixel = 0,
                            Size = UDim2.new(0, 100, 1, 0),
                        }, SliderButton)

                        local UIGradient_SliderFrame = library:create("UIGradient", {
                            Color = ColorSequence.new{
                                ColorSequenceKeypoint.new(0, Color3.fromRGB(79, 95, 239)),
                                ColorSequenceKeypoint.new(1, Color3.fromRGB(56, 67, 163))
                            },
                            Rotation = 90,
                        }, SliderFrame)

                        local SliderValue = library:create("TextLabel", {
                            Name = "SliderValue",
                            BackgroundTransparency = 1,
                            Position = UDim2.new(0, 69, 0, 6),
                            Size = UDim2.new(0, 200, 0, 9),
                            Font = Enum.Font.Ubuntu,
                            Text = value.Slider,
                            TextColor3 = Color3.fromRGB(150, 150, 150),
                            TextSize = 14,
                            TextXAlignment = Enum.TextXAlignment.Right,
                        }, Slider)

                        local is_sliding = false
                        local mouse_in = false

                        Slider.MouseEnter:Connect(function()
                            library:tween(SliderText, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
                            library:tween(SliderValue, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})

                            mouse_in = true
                        end)

                        Slider.MouseLeave:Connect(function()
                            if not is_sliding then
                                library:tween(SliderText, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(150, 150, 150)})
                                library:tween(SliderValue, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(150, 150, 150)})
                            end

                            mouse_in = false
                        end)

                        SliderButton.MouseButton1Down:Connect(function()
                            is_sliding = true

                            -- Function to update the slider based on mouse position
                            local function updateSlider()
                                -- Calculate the relative X position of the mouse to the slider
                                local relativeX = mouse.X - SliderButton.AbsolutePosition.X
                                relativeX = math.clamp(relativeX, 0, 260) -- Ensure it stays within bounds

                                -- Update the slider frame size based on mouse position
                                SliderFrame.Size = UDim2.new(0, relativeX, 1, 0)

                                -- Calculate the new slider value
                                local val = math.floor((((max - min) / 260) * relativeX) + min)
                                if val ~= value.Slider then
                                    SliderValue.Text = val
                                    value.Slider = val
                                    do_callback()
                                end
                            end

                            -- Initial update when dragging starts
                            updateSlider()

                            -- Connect the mouse move event to update the slider
                            local move_connection = mouse.Move:Connect(updateSlider)

                            -- Rainbow color variables
                            local hue = 0
                            local rainbow_connection
                            local function updateRainbow()
                                hue = (hue + 0.001) % 1 -- Increment hue smoothly
                                SliderFrame.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
                            end

                            -- Start updating the rainbow color
                            rainbow_connection = rs.RenderStepped:Connect(updateRainbow)

                            -- Connect the input ended event to stop dragging and rainbow update
                            local release_connection
                            release_connection = uis.InputEnded:Connect(function(input)
                                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                                    is_sliding = false

                                    -- Reset text colors
                                    library:tween(SliderText, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                                        TextColor3 = Color3.fromRGB(150, 150, 150)
                                    })
                                    library:tween(SliderValue, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                                        TextColor3 = Color3.fromRGB(150, 150, 150)
                                    })

                                    -- Disconnect the event listeners to stop updating
                                    if move_connection then
                                        move_connection:Disconnect()
                                    end
                                    if release_connection then
                                        release_connection:Disconnect()
                                    end

                                    -- Disconnect the rainbow update
                                    if rainbow_connection then
                                        rainbow_connection:Disconnect()
                                        -- Optionally, reset the slider color to a default color
                                        SliderFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                    end
                                end
                            end)
                        end

                        function element:set_value(new_value, cb)
                            value = new_value and new_value or value
                            menu.values[tab.tab_num][section_name][sector_name][flag] = value

                            local new_size = (value.Slider - min) / (max - min)
                            SliderFrame.Size = UDim2.new(new_size, 0, 1, 0)
                            SliderValue.Text = value.Slider

                            if cb == nil or not cb then
                                do_callback()
                            end
                        end
                        element:set_value(value, true)
                    end

                    return element
                end

                return section
            end

            return tab
        end

        return menu
    end

    return library
end

return library
